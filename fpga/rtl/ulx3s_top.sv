// SPDX-FileCopyrightText: Â© 2022 Leo Moser <leo.moser@pm.me>
// SPDX-License-Identifier: GPL-3.0-or-later

`timescale 1ns/1ps
`default_nettype none

module ulx3s_top (
    input clk_25mhz,

    input  [6:0] btn,
    output [7:0] led,

    output wire [3:0] gpdi_dp  // HDMI signals, blue, green, red, clock 	
                               // dgpi_dn generated by pins (see, e.g., ulx3s.lpf)
);
    logic reset_n;
    assign reset_n = btn[0];

    logic video_clk;
    logic video_clk5;

    `ifdef SYNTHESIS
    GFX_PLL GFX_PLL(
        .pclk (clk_25mhz),         // the board's clock
        .pixel_clk (video_clk),    // pixel clock
        .pixel_clk_x5 (video_clk5)  // 5 times pixel clock freq (used by TMDS serializer)
                              // The TMDS serializers operate at (pixel_clock_freq * 10), 
                              // but we use DDR mode, hence (pixel_clock_freq * 5).
    );
    `else
    assign video_clk = clk_25mhz;
    assign video_clk5 = clk_25mhz;
    `endif
    
    logic [24-1:0] counter;
    
    always_ff @(posedge video_clk, negedge reset_n) begin
        if (!reset_n) begin
            counter <= '0;
        end else begin
            counter <= counter + 1;
        end
    end
    
    assign led[0] = counter[24-1];
    assign led[1] = !counter[24-1];

    logic [5:0] rrggbb;
    logic hsync;
    logic vsync;
    logic hblank;
    logic vblank;
    logic de;

    top top_inst (
        .clk        (video_clk), // 40 MHz
        .reset_n    (reset_n),

        // SPI signals
        .spi_sclk (1'b0),
        .spi_mosi (1'b0),
        .spi_miso (),
        .spi_cs   (1'b0),

        // SVGA signals
        .rrggbb         (rrggbb),
        .hsync          (hsync),
        .vsync          (vsync),
        .next_vertical  (),
        .next_frame     (),
        .hblank         (hblank),
        .vblank         (vblank),
        .de             (de)
    );
    
    /*
    logic gold_hsync, gold_vsync, gold_de, gold_frame, gold_line;
    logic signed [16-1:0] gold_sx;
    logic signed [16-1:0] gold_sy;
    
    display_600p display_600p_inst (
        .clk_pix    (clk),  // pixel clock
        .rst_pix    (!reset_n),  // reset in pixel clock domain
        .hsync      (gold_hsync),    // horizontal sync
        .vsync      (gold_vsync),    // vertical sync
        .de         (gold_de),       // data enable (low in blanking interval)
        .frame      (gold_frame),    // high at start of frame
        .line       (gold_line),     // high at start of line
        .sx         (gold_sx),  // horizontal screen position
        .sy         (gold_sy)   // vertical screen position
    );
    */

    logic [ 3: 0] paint_r;
    logic [ 3: 0] paint_g;
    logic [ 3: 0] paint_b;

    assign paint_r = {rrggbb[5], {3{rrggbb[4]}}};
    assign paint_g = {rrggbb[3], {3{rrggbb[2]}}};
    assign paint_b = {rrggbb[1], {3{rrggbb[0]}}};
    
    logic [ 3: 0] gold_paint_r;
    logic [ 3: 0] gold_paint_g;
    logic [ 3: 0] gold_paint_b;
    
    assign gold_paint_r = 4'b1111;
    assign gold_paint_g = 4'b1111;
    assign gold_paint_b = 4'b1111;

    GFX_hdmi GFX_hdmi (
        .pixel_clk  (video_clk),    // pixel clock
        .pixel_clk_x5(video_clk5), // 5 times pixel clock freq (used by TMDS serializer)
                                // The TMDS serializers operate at (pixel_clock_freq * 10), 
                                // but we use DDR mode, hence (pixel_clock_freq * 5).
        .R          ({paint_r, {4{paint_r[0]}}}),
        .G          ({paint_g, {4{paint_g[0]}}}),
        .B          ({paint_b, {4{paint_b[0]}}}),
        .hsync      (hsync),
        .vsync      (vsync),
        .draw_area  (de),

        .gpdi_dp    (gpdi_dp) // HDMI signals, blue, green, red, clock 	
                              // dgpi_dn generated by pins (see, e.g., ulx3s.lpf)
    );

endmodule
